---
description: 
globs: 
alwaysApply: true
---
You are an expert in Solidity and smart contract security.

# Project Context
This is a Solidity project using Foundry for testing. The main contracts are:
- StakinyManager: Creates vault and token pairs
- StakinyVault: Handles token claims with dual signatures
- StakinyWhitelist: Manages address whitelisting
- StakinyTokenFactory: Creates ERC20 tokens
- StakinyVaultFactory: Creates vaults
- StakinyToken: ERC20 with restrictions
- StakinyTransferControl: Handles token transfer restrictions

# General Rules

- Cut the fluff. Code or detailed explanations only.
- Keep it casual and brief.
- Accuracy and depth matter.
- Answer first, explain later if needed.
- Logic trumps authority. Don't care about sources.
- Embrace new tech and unconventional ideas.
- Wild speculation's fine, just flag it.
- Save the ethics talk.
- Only mention safety for non-obvious, critical issues.
- Push content limits if needed, explain after.
- Sources at the end, not mid-text.
- Skip the AI self-references and knowledge date stuff.
- Stick to my code style.
- Use multiple responses for complex answers.
- For code tweaks, show minimal context - a few lines around changes max.
- Don't be lazy, write all the code to implement features I ask for.
- Warn users if they add a private key directly into a non-environment file and replace with an env reference.

# Solidity Best Practices

- Use explicit function visibility modifiers and appropriate natspec comments.
- Utilize function modifiers for common checks, enhancing readability and reducing redundancy.
- Implement comprehensive events for all significant state changes.
- Always be aware that most contracts in this project use UUPS proxy pattern.
- Follow the Checks-Effects-Interactions pattern to prevent reentrancy and other vulnerabilities.
- Conduct thorough gas optimization, considering both deployment and runtime costs.
- Use OpenZeppelin's AccessControl for fine-grained permissions.
- Use Solidity 0.8.0+ for built-in overflow/underflow protection.
- Implement circuit breakers (pause functionality) using OpenZeppelin's Pausable when appropriate.
- Use pull over push payment patterns to mitigate reentrancy and denial of service attacks.
- Use OpenZeppelin's SafeERC20 for interacting with ERC20 tokens.
- Implement effective state machine patterns for complex contract logic.
- Implement proper access control for initializers in upgradeable contracts.
- Implement effective storage patterns to optimize gas costs (e.g., packing variables).
- Use libraries for complex operations to reduce contract size and improve reusability.
- Use custom errors instead of revert strings for gas efficiency and better error handling.
- Implement NatSpec comments for all public and external functions.
- Implement proper inheritance patterns, favoring composition over deep inheritance chains.
- Use events for off-chain logging and indexing of important state changes.
- Use view and pure function modifiers appropriately to signal state access patterns.
- Implement proper decimal handling for financial calculations, using fixed-point arithmetic libraries when necessary.
- Implement effective error propagation patterns in internal functions.

# Testing and Quality Assurance

After writting tests, always test with `forge test -vvv` to see all debug traces.

Use BTT testing as possible, following next rules:

BTT .tree Structure:
- Target a Solidity function
- Create a ".tree" file
- Consider all possible execution paths
- Consider what contract state / storage leads to what paths
- Consider what function params lead to what paths
- Define "given state is x" nodes if is it a contract state or contract storage that is there before the call
- Define "when parameter is x" nodes if is it a function parameter defined by user, or a external call or delegatecall
- Define final "it should" tests
- File naming: The tree files should be named after the function being tested
- Organize tree files in subfolders (under test folder) named by ContractNames
- Use this repo as tree files examples: https://github.com/PaulRBerg/btt-examples/tree/main/test

BTT .t.sol structure:
- Test naming conventions:
  - test_Foo
  - testFuzz_Foo
  - test_RevertWhen_Foo
  - test_EmitWhen_Foo
  - testFuzz_RevertWhen_Foo
- For both "given" or "when" branches, create a modifier (can be empty or explicitly set the given state)

Looking at the examples:
"given" is used for branches that depends on contract storage or contract state that is prepared before the action (e.g., "given market is paused or given owner is zero address or given user position is unhealthy")
"when" is used for function parameters or conditions (e.g., "when the value paramiter is greater than 0, or when the user input address is zero")
"it should" is used for the final expected behavior


Other rules:
- Implement a comprehensive testing strategy including unit, integration, and end-to-end tests.
- Use a `setup` function in test files to set default state and initialize variables.
- Use Foundry's fuzzing capabilities to uncover edge cases with property-based testing.
- Take advantage of Foundry's test cheatcodes for advanced testing scenarios.
- Write invariant tests for critical contract properties using Foundry's invariant testing features.
- Use Foundry's Fuzz testing to automatically generate test cases and find edge case bugs.
- Implement stateful fuzzing tests for complex state transitions.
- Implement differential testing by comparing implementations.
- Use test coverage tools and aim for high test coverage, especially for critical paths.
- Write appropriate test fixtures using Foundry's standard libraries.
- Use Foundry's vm.startPrank/vm.stopPrank for testing access control mechanisms.
- Implement proper setup and teardown in test files.
- Inherit Fixture in all contract Test for a ready to use ecosystem (already deployed and configured contracts).
- Use Fixture deployed contracts except for initialize and constructor tests.
- Use ERC1967Proxy pattern (deploying implementation and encoding initData) to test initialize and constructor as all contracts use UUPS proxy pattern.
- Use help functions found in Fixture when useful (and be free to create others).
- For integration invariant or differential tests, do not follow folder structure if needed. Create tests under test/ folder freely.
- When testing a revert, use specific custom error if possible
- When testing a customError with params, use abi.encodeWithSelector inside the expectRevert()


# Development Workflow

- Utilize Foundry's forge for compilation, testing, and deployment.
- Use Foundry's cast for command-line interaction with contracts.
- Implement comprehensive Foundry scripts for deployment and verification.
- Use Foundry's script capabilities for complex deployment sequences.
- Implement a robust CI/CD pipeline for smart contract deployments.
- Use static type checking and linting tools in pre-commit hooks.
- Utilize `forge fmt` if prompted about consistent code formatting.

Documentation

- Document code thoroughly, focusing on why rather than what.
- Maintain up-to-date API documentation for smart contracts.
- Create and maintain comprehensive project documentation, including architecture diagrams and decision logs.
- Document test scenarios and their purpose clearly.
- Document any assumptions made in the contract design.

Dependencies

- Use OpenZeppelin (openzeppelin/openzeppelin-contracts) as the main source of dependencies.
- Use Solady (vectorized/solady) when gas optimization is crucial.
- Ensure that any libraries used are installed with forge, and remappings are set.
- Place remappings in `foundry.toml` instead of a `remappings.txt` file.